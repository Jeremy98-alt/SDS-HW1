averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
theoretical.bound2 <- maxcut2/2
theoretical.bound2
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
G2 <- erdos.renyi.game(15, 1/5)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
gsize(G2)
G2 <- erdos.renyi.game(20, 1/5)
plot(G2)
G2 <- erdos.renyi.game(20, 1/5)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(20, 1/5)
plot(G2)
G2 <- erdos.renyi.game(20, 1/5)
G2 <- erdos.renyi.game(20, 1/5)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(20, 1/5)
plot(G2)
G2 <- erdos.renyi.game(20, 1/6)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(10, 1/6)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(12, 1/6)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
G2 <- erdos.renyi.game(12, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
G2 <- erdos.renyi.game(12, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
gsize(G2)
?erdos.renyi.game
G2 <- erdos.renyi.game(20, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
adj2
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
#maximum cut
result2 <- maxcut(adj2)
#return the maximum cut, use the value returned
maxcut2 <- abs(result2$pobj)
#maximum cut
result2 <- maxcut(adj2)
#maximum cut
result2 <- maxcut(adj2)
result2
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
#return the maximum cut, use the value returned
maxcut2 <- abs(result2$pobj)
maxcut2
#matrix correlation or... X
result2$Z
U <- subset.V(vertex.names, gsize(G2))
G <- graph( edges=c(1,2, 2,3, 1,4, 4,3, 3,5, 5,6, 5,7),  n=7, directed=F)
plot(G)
#Bernoulli distribution
colo <- c(rgb(32/255, 74/255, 135/255, 0.7))
#Set parameters
pp <- c(0.5, 0.7)
nn <- c(20, 40)
#Plot PMF
plot(0:nn[1], dbinom(0:nn[1], nn[1], pp[1]),
xlim = c(0,40), ylim = c(0,0.25),
type="b", lty=3,
xlab= "", ylab ="",
col=gray(.8), pch=21, bg=colo)
#Bernoulli distribution
colo <- c(rgb(32/255, 74/255, 135/255, 0.7))
#Set parameters
pp <- c(0.5)
nn <- c(100)
#Plot PMF
plot(0:nn[1], dbinom(0:nn[1], nn[1], pp),
xlim = c(0,40), ylim = c(0,0.25),
type="b", lty=3,
xlab= "", ylab ="",
col=gray(.8), pch=21, bg=colo)
#Bernoulli distribution
colo <- c(rgb(32/255, 74/255, 135/255, 0.7))
#Set parameters
pp <- c(0.5)
nn <- c(100)
#Plot PMF
plot(0:nn[1], dbinom(0:nn[1], nn[1], pp),
xlim = c(0,100), ylim = c(0,0.25),
type="b", lty=3,
xlab= "", ylab ="",
col=gray(.8), pch=21, bg=colo)
#Bernoulli distribution
colo <- c(rgb(32/255, 74/255, 135/255, 0.7))
#Set parameters
pp <- c(0.5)
nn <- c(100)
#Plot PMF
plot(0:nn[1], dbinom(0:nn[1], nn, pp),
xlim = c(0,100), ylim = c(0,0.25),
type="b", lty=3,
xlab= "", ylab ="",
col=gray(.8), pch=21, bg=colo)
#Bernoulli distribution
colo <- c(rgb(32/255, 74/255, 135/255, 0.7))
#Set parameters
pp <- c(0.5)
nn <- c(100)
#Plot PMF
plot(0:nn[1], dbinom(0:nn[1], nn, pp),
xlim = c(0,100), ylim = c(0,0.25),
type="b", lty=3,
xlab= "", ylab ="",
col=gray(.8), pch=10, bg=colo)
#Bernoulli distribution
colo <- c(rgb(32/255, 74/255, 135/255, 0.7))
#Set parameters
pp <- c(0.5)
nn <- c(100)
#Plot PMF
plot(0:nn[1], dbinom(0:nn[1], nn, pp),
xlim = c(0,100), ylim = c(0,0.25),
type="b", lty=3,
xlab= "", ylab ="",
col=gray(.8), pch=21, bg=colo)
#Bernoulli distribution
colo <- c(rgb(32/255, 74/255, 135/255, 0.7))
#Set parameters
pp <- c(0.5)
nn <- c(100)
#Plot PMF
plot(0:nn[1], dbinom(0:nn[1], nn, pp),
xlim = c(0,100), ylim = c(0,0.10),
type="b", lty=3,
xlab= "", ylab ="",
col=gray(.8), pch=21, bg=colo)
grid()
legend("topleft", c("p = 0.5, n = 20", "p= 0.7", n = 100),
col = colo, pch=19, bty="n", .cex = .8)
#Bernoulli distribution
colo <- c(rgb(32/255, 74/255, 135/255, 0.7))
#Set parameters
pp <- 0.5
nn <- 1000
#Plot PMF
plot(0:nn, dbinom(0:nn, nn, pp),
xlim = c(0,100), ylim = c(0,0.10),
type="b", lty=3,
xlab= "", ylab ="",
col=gray(.8), pch=21, bg=colo)
grid()
legend("topleft", c("p = 0.5, n = 20", "p= 0.7", n = 100),
col = colo, pch=19, bty="n", .cex = .8)
#Bernoulli distribution
colo <- c(rgb(32/255, 74/255, 135/255, 0.7))
#Set parameters
pp <- 0.5
nn <- 100
#Plot PMF
plot(0:nn, dbinom(0:nn, nn, pp),
xlim = c(0,100), ylim = c(0,0.10),
type="b", lty=3,
xlab= "", ylab ="",
col=gray(.8), pch=21, bg=colo)
grid()
legend("topleft", c("p = 0.5, n = 20", "p= 0.7", n = 100),
col = colo, pch=19, bty="n", .cex = .8)
#Bernoulli distribution
colo <- c(rgb(32/255, 74/255, 135/255, 0.7))
#Set parameters
pp <- 0.5
nn <- 100
#Plot PMF
plot(0:nn, dbinom(0:nn, nn, pp),
xlim = c(0,100), ylim = c(0,0.10),
type="b", lty=3,
xlab= "", ylab ="",
col=gray(.8), pch=21, bg=colo)
grid()
legend("topleft", c("p = 0.5, n = 20", "p= 0.7", n = 100),
col = colo, pch=19, bty="n", cex = .8)
#Bernoulli distribution
colo <- c(rgb(32/255, 74/255, 135/255, 0.7))
#Set parameters
pp <- 0.5
nn <- 100
#Plot PMF
plot(0:nn, dbinom(0:nn, nn, pp),
xlim = c(0,100), ylim = c(0,0.10),
type="b", lty=3,
xlab= "", ylab ="",
col=gray(.8), pch=21, bg=colo)
grid()
legend("topleft", c("p = 0.5, n = 20", n = 100),
col = colo, pch=19, bty="n", cex = .8)
library("Rlab")
x_dbern <- seq(0, 100, by=1)
y_dbern <- dbern(x_dbern, prob=0.5)
plot(y_debern, type="o")
plot(y_dbern, type="o")
y_dbern <- dbern(x_dbern, prob=0.5)
plot(y_dbern, type="o")
x_dbern <- seq(0, 100, by=1)
y_dbern <- dbern(x_dbern, prob=0.5)
plot(y_dbern, type="o")
y_dbern <- dbern(x_dbern, prob=1)
plot(y_dbern, type="o")
x_dbern <- seq(0, 100, by=1)
y_dbern <- dbern(x_dbern, prob=1)
plot(y_dbern, type="o")
y_dbern
y_dbern <- dbern(x_dbern, prob=0.6)
y_dbern
y_dbern <- dbern(x_dbern, prob=0.5)
y_dbern
x_dbern <- seq(0, 100)
y_dbern <- dbern(x_dbern, prob=0.5)
plot(y_dbern, type="o")
plot(y_dbern, type="o")
y_dbern
?dbern
#Bernoulli distribution
colo <- c(rgb(32/255, 74/255, 135/255, 0.7))
#Set parameters
pp <- 0.5
nn <- 100
#Plot PMF
plot(0:nn, dbinom(0:nn, nn, pp),
xlim = c(0,100), ylim = c(0,0.10),
type="b", lty=3,
xlab= "", ylab ="",
col=gray(.8), pch=21, bg=colo)
grid()
legend("topleft", c("p = 0.5, n = 20", n = 100),
col = colo, pch=19, bty="n", cex = .8)
# Change the graph size to see if there is an impact on the performance --------
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
#return the maximum cut, use the value returned
maxcut2 <- abs(result2$pobj)
maxcut2
#matrix correlation or... X
result2$Z
#show the result
vertex.names <- as_ids(V(G2))
U <- subset.V(vertex.names, gsize(G2))
adj2[lower.tri(adj2, diag=FALSE)] <- 0
list.edges <- which(adj2==1, arr.ind = TRUE)
colnames(list.edges) <- c("V1", "V2")
theoretical.bound2 <- maxcut2/2
theoretical.bound2
averageCutSize(vertex.names, list.edges, 1000)
G2 <- erdos.renyi.game(10, 1/2)
# Change the graph size to see if there is an impact on the performance --------
library(igraph)
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
gsize(G2)
adj2
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "upper",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(20, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "upper",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
typeof(adj2)
#maximum cut
result2 <- maxcut(adj2)
#run the library and search our max-cut(G)
library(sdpt3r)
#maximum cut
result2 <- maxcut(adj2)
adj2
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
G2 <- erdos.renyi.game(20, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
G2 <- erdos.renyi.game(20, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
#return the maximum cut, use the value returned
maxcut2 <- abs(result2$pobj)
G2 <- erdos.renyi.game(20, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
G2 <- erdos.renyi.game(20, 1/5)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
knitr::opts_chunk$set(echo = TRUE)
# Change the graph size to see if there is an impact on the performance
G2 <- erdos.renyi.game(15, 1/5)
plot(G2)
# Change the graph size to see if there is an impact on the performance
G2 <- erdos.renyi.game(15, 1/5)
G2 <- erdos.renyi.game(20, 1/5)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
adj
adj2
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
adj2
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2)
adj2
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2)
#maximum cut
result2 <- maxcut(adj2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2)
adj2
#convert S4 object to matrix
adj2 <- as.matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#convert S4 object to matrix
adj2 <- as.matrix(adj2)
#maximum cut
result2 <- maxcut(adj2)
#return the maximum cut, use the value returned
maxcut2 <- abs(result2$pobj)
maxcut2
# Change the graph size to see if there is an impact on the performance
G2 <- erdos.renyi.game(20, 1/3)
plot(G2)
plot(G2)
# Change the graph size to see if there is an impact on the performance
G2 <- erdos.renyi.game(20, 1/3)
plot(G2)
```{r}
# Change the graph size to see if there is an impact on the performance
G2 <- erdos.renyi.game(20, 1/3)
