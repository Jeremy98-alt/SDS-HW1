colnames(list.edges) <- c("V1", "V2") #change columns name..
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges)
theoretical.bound <- maxcut/2
theoretical.bound
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges)
theoretical.bound <- maxcut/2
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges)
#calculate M times and return the average cut size
averageCutSize <- function(vertex.names, list.edges, M){
avg.cutsize <- c()
for(i in 1:M){
U <- subset.V(vertex.names, length(vertex.names))
card.U <- num.edges.U(U, list.edges) #cardinality of U
#append the result
avg.cutsize <- append(avg.cutsize, card.U)
}
#finally return the mean!
return(mean(avg.cutsize))
}
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 10)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 10)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
?apply
#calculate M times and return the average cut size
averageCutSize <- function(vertex.names, list.edges){
avg.cutsize <- c()
U <- subset.V(vertex.names, length(vertex.names))
card.U <- num.edges.U(U, list.edges) #cardinality of U
#append the result
avg.cutsize <- append(avg.cutsize, card.U)
#finally return the mean!
return(mean(avg.cutsize))
}
#call M times the averageCutSize
for( i in 10 ){ averageCutSize(vertex.names, list.edges) }
#call M times the averageCutSize
for( i in 10 ){ print(averageCutSize(vertex.names, list.edges)) }
theoretical.bound <- maxcut/2
#call M times the averageCutSize
for( i in 10 ){ print(averageCutSize(vertex.names, list.edges)) }
#call M times the averageCutSize
for( i in 1:10 ){ averageCutSize(vertex.names, list.edges) }
print(averageCutSize(vertex.names, list.edges))
#call M times the averageCutSize
for(i in 1:10 ){
print(averageCutSize(vertex.names, list.edges))
}
#call M times the averageCutSize
for(i in 1:10 ){
print(averageCutSize(vertex.names, list.edges))
}
#call M times the averageCutSize
for(i in 1:10 ){
print(averageCutSize(vertex.names, list.edges))
}
#calculate M times and return the average cut size
averageCutSize <- function(vertex.names, list.edges, M){
avg.cutsize <- c()
for(i in i:M){
U <- subset.V(vertex.names, length(vertex.names)) #obtain the subset U through the main graph V
card.U <- num.edges.U(U, list.edges) #cardinality of U
#append the result
avg.cutsize <- append(avg.cutsize, card.U)
}
#finally return the mean!
return(mean(avg.cutsize))
}
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#calculate M times and return the average cut size
averageCutSize <- function(vertex.names, list.edges, M){
avg.cutsize <- c()
for(i in 1:M){
U <- subset.V(vertex.names, length(vertex.names))
card.U <- num.edges.U(U, list.edges) #cardinality of U
#append the result
avg.cutsize <- append(avg.cutsize, card.U)
}
#finally return the mean!
return(mean(avg.cutsize))
}
#calculate M times and return the average cut size
averageCutSize <- function(vertex.names, list.edges, M){
avg.cutsize <- c()
for(i in 1:M){
U <- subset.V(vertex.names, length(vertex.names)) #define the subset of V
card.U <- num.edges.U(U, list.edges) #cardinality of U
#append the result
avg.cutsize <- append(avg.cutsize, card.U)
}
#finally return the mean!
return(mean(avg.cutsize))
}
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 100)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 10)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 10)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 10)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 10)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
#call M times the averageCutSize
averageCutSize(vertex.names, list.edges, 1000)
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
#return the maximum cut, use the value returned
maxcut2 <- abs(result$pobj)
maxcut2
#matrix correlation or... X
result2$Z
plot(G2)
G2 <- erdos.renyi.game(10, 1/3)
plot(G2)
G2 <- erdos.renyi.game(100, 1/3)
plot(G2)
G2 <- erdos.renyi.game(20, 1/5)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj, ncol = gsize(G2), nrow = gsize(G2))
adj2
G2
G2 <- erdos.renyi.game(15, 1/5)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj, ncol = gsize(G2), nrow = gsize(G2))
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
G2 <- erdos.renyi.game(10, 1/5)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
#return the maximum cut, use the value returned
maxcut2 <- abs(result$pobj)
maxcut2
#matrix correlation or... X
result2$Z
#show the result
U <- subset.V(vertex.names, gsize(G2))
vertex.names <- as_ids(V(G2))
#show the result
vertex.names <- as_ids(V(G2))
U <- subset.V(vertex.names, gsize(G2))
adj2[lower.tri(adj2, diag=FALSE)] <- 0
list.edges <- which(adj2==1, arr.ind = TRUE)
colnames(list.edges) <- c("V1", "V2")
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
#return the maximum cut, use the value returned
maxcut2 <- abs(result2$pobj)
maxcut2
#matrix correlation or... X
result2$Z
#show the result
vertex.names <- as_ids(V(G2))
U <- subset.V(vertex.names, gsize(G2))
adj2[lower.tri(adj2, diag=FALSE)] <- 0
list.edges <- which(adj2==1, arr.ind = TRUE)
colnames(list.edges) <- c("V1", "V2")
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
theoretical.bound2 <- maxcut2/2
theoretical.bound2
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
averageCutSize(vertex.names, list.edges, 1000)
G2 <- erdos.renyi.game(15, 1/5)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
gsize(G2)
G2 <- erdos.renyi.game(20, 1/5)
plot(G2)
G2 <- erdos.renyi.game(20, 1/5)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(20, 1/5)
plot(G2)
G2 <- erdos.renyi.game(20, 1/5)
G2 <- erdos.renyi.game(20, 1/5)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(20, 1/5)
plot(G2)
G2 <- erdos.renyi.game(20, 1/6)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(10, 1/6)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(12, 1/6)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
G2 <- erdos.renyi.game(12, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
G2 <- erdos.renyi.game(12, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
gsize(G2)
?erdos.renyi.game
G2 <- erdos.renyi.game(20, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
adj2
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
#maximum cut
result2 <- maxcut(adj2)
#return the maximum cut, use the value returned
maxcut2 <- abs(result2$pobj)
#maximum cut
result2 <- maxcut(adj2)
#maximum cut
result2 <- maxcut(adj2)
result2
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
G2 <- erdos.renyi.game(10, 1/2)
plot(G2)
#firstly search to create our adjacency_matrix from G
adj2 <- as_adjacency_matrix(G2, type = "both",
attr = NULL, edges = FALSE)
#convert S4 object to matrix
adj2 <- matrix(adj2, ncol = gsize(G2), nrow = gsize(G2))
#maximum cut
result2 <- maxcut(adj2)
#return the maximum cut, use the value returned
maxcut2 <- abs(result2$pobj)
maxcut2
#matrix correlation or... X
result2$Z
U <- subset.V(vertex.names, gsize(G2))
G <- graph( edges=c(1,2, 2,3, 1,4, 4,3, 3,5, 5,6, 5,7),  n=7, directed=F)
plot(G)
